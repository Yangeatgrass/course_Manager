<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.courseManager.system.mapper.TeacherUserMapper">
    
    <resultMap type="TeacherUser" id="TeacherUserResult">
        <result property="tuId"    column="tu_id"    />
        <result property="teacherId"    column="teacher_id"    />
        <result property="userId"    column="user_id"    />
    </resultMap>

    <sql id="selectTeacherUserVo">
        select tu_id, teacher_id, user_id from teacher_user
    </sql>

    <select id="selectTeacherUserList" parameterType="TeacherUser" resultMap="TeacherUserResult">
        <include refid="selectTeacherUserVo"/>
        <where>  
            <if test="teacherId != null "> and teacher_id = #{teacherId}</if>
            <if test="userId != null "> and user_id = #{userId}</if>
        </where>
    </select>
    
    <select id="selectTeacherUserByTuId" parameterType="Long" resultMap="TeacherUserResult">
        <include refid="selectTeacherUserVo"/>
        where tu_id = #{tuId}
    </select>
        
    <insert id="insertTeacherUser" parameterType="TeacherUser">
        insert into teacher_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tuId != null">tu_id,</if>
            <if test="teacherId != null">teacher_id,</if>
            <if test="userId != null">user_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="tuId != null">#{tuId},</if>
            <if test="teacherId != null">#{teacherId},</if>
            <if test="userId != null">#{userId},</if>
         </trim>
    </insert>

    <update id="updateTeacherUser" parameterType="TeacherUser">
        update teacher_user
        <trim prefix="SET" suffixOverrides=",">
            <if test="teacherId != null">teacher_id = #{teacherId},</if>
            <if test="userId != null">user_id = #{userId},</if>
        </trim>
        where tu_id = #{tuId}
    </update>

    <delete id="deleteTeacherUserByTuId" parameterType="Long">
        delete from teacher_user where tu_id = #{tuId}
    </delete>

    <delete id="deleteTeacherUserByTuIds" parameterType="String">
        delete from teacher_user where tu_id in 
        <foreach item="tuId" collection="array" open="(" separator="," close=")">
            #{tuId}
        </foreach>
    </delete>

    <!--新增用户与教员身份-->
    <insert id="insertTeacherWithUser">
        insert into teacher_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="teacherId != null">teacher_id,</if>
            <if test="userId != null">user_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="teacherId != null">#{teacherId},</if>
            <if test="userId != null">#{userId},</if>
        </trim>
    </insert>

    <!--根据userId删除教员与用户关联-->
    <delete id="deleteTeacherUserByUserId" parameterType="Long">
        DELETE FROM teacher_user WHERE user_id = #{userId}
    </delete>

    <!--更新角色与教员关联表-->
    <update id="updateTeacherWithUser">
        UPDATE teacher_user
            SET teacher_id = #{teacherId}
        WHERE
            user_id = #{userId}
    </update>

    <!--批量删除用户与教员关联-->
    <delete id="deleteTeacherUser">
        delete from teacher_user where user_id in
        <foreach collection="array" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>

    <select id="getTeacherIdByUserId" resultType="java.lang.Long">
        SELECT
            teacher_id
        FROM
            teacher_user
        WHERE
            user_id = #{userId}
    </select>

    <!--根据教员id查询关联表id-->
    <select id="getTuIdByTeacherId" resultType="java.lang.Long">
        SELECT
            tu_id
        FROM
            teacher_user
        WHERE
            teacher_id = #{id}
    </select>
</mapper>